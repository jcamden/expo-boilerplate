// add these to your user snippets typescriptreact.json file:
{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "eslint disable next line": {
    "prefix": "esld",
    "body": ["// eslint-disable-next-line"],
    "description": "Use responsibly (euphemism for 'danger'). Disables eslint for next line; can specify a rule (e.h. @typescript-eslint/explicit-function-return-type"
  },
  "TS React arrow function component": {
    "prefix": "tsrafc",
    "body": [
      "import React from 'react'",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "\t$1",
      "}",
      "",
      "export const $TM_FILENAME_BASE: React.FC<${TM_FILENAME_BASE}Props> = ({${1/\\:.*;/,/g}}) => {",
      "\t\treturn ( $0 );",
      "}"
    ],
    "description": "tab stops (unlabeled): $1:props, $0:return; Prettier recommended;"
  },
  "useState (Object)": {
    "prefix": "uso",
    "body": [
      "interface ${1/([a-z])/${1:/upcase}/} {",
      "\t$3",
      "}",
      "",
      "const initial${1/([a-z])/${1:/upcase}/} = {$0",
      "\t${3/\\:.*;/:/g}",
      "}",
      "",
      "const [$1, set${name:${1/([a-z])/${1:/upcase}/}}] = useState<${1/([a-z])/${1:/upcase}/}>(initial${1/([a-z])/${1:/upcase}/});"
    ],
    "description": "tab stops (unlabeled): $1:name, $2:type, $0:initial values; Prettier recommended;"
  }
}
